                     e.g. c=3
                          n=[2, 4,    8,          16,              32,                             64..]
                          
O(c)        constant        [3, 3,    3,           3,               3,                              3..]
O(log(n))   logarithmic     [1, 2,    3,           4,               5,                              6..]
O(n)        linear          [2, 4,    8,          16,              32,                             64..]
O(nlog(n))  loglinear       [2, 8,   24,          64,             160,                            384..] 
O(n^c)      polynomial      [8,64,  512,        4096,           32768,                    68719476736..]
O(c^n)      exponential     [9,81, 6561,    43046721,1853020188851841,3433683820292512484657849089281..]
O(n!)       factorial       [2,24,40320,2.092279e+13,   2.6313084e+35,                  1.2688693e+89..]


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

def factorial_iterative(n:int) -> int:             
  result = 1                                # (base case)                           = O(c)
  for number in range(n):                   # for complexity                        = O(n)
    result *= number                        # * complexity                          = O(c)
  return result                             # iterative_function() complexity       = O(c*n*c) = O(n) 
                        
def factorial_recursive(n:int) -> int:            
  if n == 1:                                # == complexity                         = O(c)    
    return 1                                # (base case)                           = O(c)
  return n * factorial_recursive(n-1)       # * complexity                          = O(c)
                                            # recursive_function() complexity       = max tree breadth ^ max tree depth
                                            #                                       = complexity ^ maximum depth of recursion 
                                            #                                       = O((c*c*c)^n) = O(c^n)
